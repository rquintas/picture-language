'(print "a")
~'(print "a")
(eval '(print "a"))
(def x '(* 3 5))
(def y (* 3 5)) 
x
y
(list 'println x (eval x) y) 
(list `println x (eval x) y) 
`(list println x (eval x) y) 
`(println x (eval x) y) 
`(println ~x (eval x) y)
`(println ~x ~(eval x) y)
`(println ~x ~(eval x) ~y)
`(println ~x ~(eval x) ~y ~@x)
(quote (list 1 2))
(syntax/quote (list 1 2))
(syntax-quote (list 1 2))
`(println x (eval x) y) 
`(println x (eval x) a) 
`(println x (eval x) ~a) 
(parser/parse "(beside wave wave)")
(:use parser)
(require 'parser)
(require 'src-cljs/parser/parser)
(require 'src-cljs/parser/parser.cljs)
(require '[cljs.repl :as repl])
(ns foo
  (:require [clojure.browser.repl :as repl]))
(ns foo
  (:require [clojure.browser.repl :as repl]))
(require '[cljs.repl :as repl])
(require 'parser)
(do 
(require '[cljs.repl :as repl])
(require '[cljs.repl.rhino :as rhino]) ;; require the rhino implementation of IJavaScriptEnv
(def env (rhino/repl-env)) ;; create a new environment
(repl/repl env) ;; start the REPL
(
))
(do
(require '[cljs.repl :as repl])
(require '[cljs.repl.rhino :as rhino]) ;; require the rhino implementation of IJavaScriptEnv
(def env (rhino/repl-env)) ;; create a new environment
(repl/repl env) ;; start the REPL
)
(repl/repl env) ;; start the REPL
(do
(require '[cljs.repl :as repl])
(require '[cljs.repl.rhino :as rhino]) ;; require the rhino implementation of IJavaScriptEnv
(def env (rhino/repl-env)) ;; create a new environment
(repl/repl env) ;; start the REPL
(
))
(require '[cljs.repl :as repl])
(require '[cljs.repl.rhino :as rhino]) ;; require the rhino implementation of IJavaScriptEnv
(def env (rhino/repl-env)) ;; create a new environment
(repl/repl env) ;; start the REPL
(cljs.repl
))
(cljs.repl)
(ns foo
  (:require [clojure.browser.repl :as repl]))
(require '[cljs.repl :as repl])
(require '[cljs.repl.rhino :as rhino])
(def env (rhino/repl-env))
(repl/repl env)
:extra-classpath-dirs ~(map cljs-home ["/lib/*" "/src/clj" "/src/cljs"])
(cljs-home "")
println (seq (.getURLs (java.lang.ClassLoader/getSystemClassLoader))))
(println (seq (.getURLs (java.lang.ClassLoader/getSystemClassLoader))))
e
(println (seq (.getURLs (java.lang.ClassLoader/getSystemClassLoader))))
(ns foo
  (:require [clojure.browser.repl :as repl]))
(require '[cljs.repl :as repl])
(require '[cljs.repl.rhino :as rhino])
(def env (rhino/repl-env))
(repl/repl env)
(require 'picture)
:cljs/quit
(println (seq (.getURLs (java.lang.ClassLoader/getSystemClassLoader))))
(require 'picture)
(require '[cljs.repl :as repl])
(require '[cljs.repl.rhino :as rhino])
(def env (rhino/repl-env))
(doc clojure.walk)
(doc clojure.walk/walk)
(clojure.walk/walk print print (list 1 2 3))
(clojure.walk/walk sum print (list 1 2 3))
(clojure.walk/walk print print (list 1 2 3))
(clojure.walk/walk eval print (list 1 2 3))
(clojure.walk/walk eval nil (list 1 2 3))
(clojure.walk/walk eval identity (list 1 2 3))
(clojure.walk/walk eval identity (list `(print "a") 1 2 3))
(clojure.walk/walk eval identity (list `(print (str "a" "b")) 1 2 3))
(clojure.walk/walk eval identity (list `(print (str "a" "b")) `(+ 1 3) 2 3))
(clojure.walk/walk eval identity (list `(str "a" "b") `(+ 1 3) 2 3))
